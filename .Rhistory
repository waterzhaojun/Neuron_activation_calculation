predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+ep(lodds))
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
library(swirl)
swirl()
var(rpois(1000, 50))
nxt()
view(hits)
View(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
confint(mdl,'date')
confint(exp(b1))
exp(confint(mdl, 'date'))
max(hits[,'visits'])
hits[which(max(hits[,'visits'])),'date']
hits[which(hits$visits == max(hits[,'visits'])),'date']
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(0.95, lambda)
mdl2 <- glm(offset=log(visits+1))
mdl2 <- glm(visits~date, poisson, hits, offset=log(visits+1))
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
library(MASS)
data("shuttle")
view(shuttle)
View(shuttle)
fit <- glm(use ~ wind, "logistic", data=shuttle)
fit <- glm(use ~ wind, family = logistic, data=shuttle)
fit <- glm(use ~ wind, family = binomial(), data=shuttle)
summary(fit)
library(MASS)
data("shuttle")
View(shuttle)
fit <- glm(use ~ wind, family = binomial(), data=shuttle)
summary(fit)
shuttle$useNum[shuttle$use == 'auto'] <- 1
shuttle$useNum[shuttle$use == 'noauto'] <- 0
View(shuttle)
fit <- glm(use ~ wind, family = binomial(), data=shuttle)
summary(fit)
fit <- glm(use ~ factor(wind), family = binomial(), data=shuttle)
summary(fit)
data("shuttle")
shuttle$useNum[shuttle$use == 'auto'] <- 1
shuttle$useNum[shuttle$use == 'noauto'] <- 0
shuttle$windFactor <- factor(shuttle$wind)
logAutolander1 <- glm(shuttle$useNum ~ shuttle$windFactor, family='binomial')
summary(logAutolander1)
fit2 <- glm(use ~ factor(wind) + magn, family = binomial(), data=shuttle)
summary(fit2)
exp(fit$coefficients)
exp(fit2$coefficients)
fit$coefficients
data("InsectSprays")
view(InsectSprays)
data("InsectSprays")
View(InsectSprays)
plot(InsectSprays)
pfit <- glm(count ~ spray, familiy = "poisson", data=InsectSprays)
pfit <- glm(count ~ spray, family = "poisson", data=InsectSprays)
summary(pfit)
exp(pfit$coefficients)
pfit$coefficients
pfit$coefficients[2]
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x, y)
splines <- sapply(knot, function(knot) lm(y~x[which(x>knot)]))
knot <- 0
splines <- sapply(knot, function(knot) lm(y~x[which(x>knot)]))
splines <- sapply(knot, function(knot) (x>knot)*lm(y~x))
splines <- (x>knot)*lm(y~x)
splines <- lm(y~x)
splines
plot(x, y)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x, y)
line(x,y)
lines(x,y)
splines <- (x >knot)*lm(y~x)
length(y)
splines <- lm(y~x[which(x>knot)])
length(x)
splines <- lm(y[which(x>knot)]~x[which(x>knot)])
summary(splines)$coef
summary(splines)
knots<-c(0)
splineTerms<-sapply(knots,function(knot) (x>knot)*(x-knot))
xmat<-cbind(1,x,splineTerms)
fit<-lm(y~xmat-1)
yhat<-predict(fit)
xmat
plot(y, xmat)
fit<-lm(y~xmat-1)
summary(fit)
xmat
fit$coefficients
data("shuttle")
View(shuttle)
fit <- glm(use ~ factor(wind), family = binomial(), data=shuttle)
summary(fit)
exp(fit$coefficients)
View(shuttle)
fit2 <- glm(use ~ factor(wind) + magn, family = binomial(), data=shuttle)
summary(fit2)
exp(fit2$coefficients)
data("InsectSprays")
View(InsectSprays)
pfit <- glm(count ~ spray, family = "poisson", data=InsectSprays)
pfit$coefficients[2] # this is B - A, should reverse
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots<-c(0)
splineTerms<-sapply(knots,function(knot) (x>knot)*(x-knot))
xmat<-cbind(1,x,splineTerms)
fit<-lm(y~xmat-1)
yhat<-predict(fit)
yhat
plot(x, yhat)
(yhat[11]-yhat[6])/(x[11]-x[6])
data("InsectSprays")
View(InsectSprays)
pfit <- glm(count ~ factor(spray), family = "poisson", data=InsectSprays)
summary(pfit)
pfit <- glm(count ~ factor(spray)-1, family = "poisson", data=InsectSprays)
summary(pfit)
exp(pfit$coefficients)
err <- exp(pfit$coefficients)
eff[1]/err[2]
err[1]/err[2]
library(car)
version
data(cars)
View(cars)
car
View(car)
data(car)
class(car)
data(mtcars)
view(mtcars)
View(mtcars)
fit <- lm(mpg ~ ., data = mtcars)
summary(fit)
fit <- lm(mpg ~ .-1, data = mtcars)
summary(fit)
class(mtcars)
sapply(mtcars, class)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$am <- factor(mtcars$am)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(carb)
mtcars$am[which(mtcars$am == "0")] <- "auto"
mtcars$am[which(mtcars$am == "1")] <- "manual"
mtcars$carb <- factor(mtcars$carb)
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$am <- factor(mtcars$am)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am[which(mtcars$am == "0")] <- "auto"
mtcars$am[which(mtcars$am == "1")] <- "manual"
sapply(mtcars, class)
data(mtcars)
which(mtcars$am == "0")
dim(mtcars)
mtcars$am[which(mtcars$am == "0")]
mtcars$am[which(mtcars$am == "0")] <- c("auto")
mtcars$am[which(mtcars$am == "1")] <- c("manual")
fit <- lm(mpg ~ .-1, data = mtcars)
mtcars$am[which(mtcars$am == "0")]
mtcars
sapply(mtcars, class)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$am <- factor(mtcars$am)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
sapply(mtcars, class)
fit <- lm(mpg ~ .-1, data = mtcars)
summary(fit)
summary(lm(mpg~dist, data=mtcars))
summary(lm(mpg~disp, data=mtcars))
summary(lm(mpg~cyl, data=mtcars))
summary(lm(mpg~cyl-1, data=mtcars))
sapply(mtcars, function(vari) summary(lm(mtcars$mpg ~ vari)))
apply(mtcars, 2, function(vari) summary(lm(mtcars$mpg ~ vari)))
apply(mtcars, 2, function(vari) summary(lm(mtcars$mpg ~ vari-1)))
sapply(mtcars, class)
summary(lm(mpg ~ disp, data=mtcars))
summary(lm(mtcars$mpg ~ mtcars[,2]))
summary(lm(mtcars$mpg ~ mtcars[,3]))
summary(lm(mtcars$mpg ~ mtcars[,3]-1))
ncol(mtcars)
for(i in 1:ncol(mtcars)){
summary(lm(mtcars$mpg ~ mtcars[,i]))
}
for(i in 1:ncol(mtcars)){
summary(lm(mtcars[,1] ~ mtcars[,i]))
}
summary(lm(mtcars[,1] ~ mtcars[,i]))
summary(lm(mtcars[,1] ~ mtcars[,2]))
summary(lm(mtcars[,1] ~ mtcars[,3]))
for(i in 1:ncol(mtcars)){
summary(lm(mtcars[,1] ~ mtcars[,i]))
}
warnings()
for(i in 1:ncol(mtcars)){
fit <- lm(mtcars[,1] ~ mtcars[,i])
summary(fit)
}
for(i in 2:ncol(mtcars)){
fit <- lm(mtcars[,1] ~ mtcars[,i])
summary(fit)
}
data("mtcars")
for(i in 2:ncol(mtcars)){
fit <- lm(mtcars[,1] ~ mtcars[,i])
summary(fit)
}
summary(lm(mtcars[,1] ~ mtcars[,3]))
summary(fit)
rm(list=ls())
for(i in 2:ncol(mtcars)){
fit <- lm(mtcars[,1] ~ mtcars[,i])
summary(fit)
}
summary(fit)
for(i in 2:ncol(mtcars)){
summary(lm(mtcars[,1] ~ mtcars[,i]))
}
for(i in 2:ncol(mtcars)){
lm(mtcars[,1] ~ mtcars[,i])$coef
}
for(i in 2:ncol(mtcars)){
print(lm(mtcars[,1] ~ mtcars[,i])$coef)
}
for(i in 2:ncol(mtcars)){
print(summary(lm(mtcars[,1] ~ mtcars[,i])))
}
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$am <- factor(mtcars$am)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am[which(mtcars$am == "0")] <- c("auto")
mtcars$am[which(mtcars$am == "1")] <- c("manual")
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$am <- factor(mtcars$am)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am[which(mtcars$am == "0")] <- c("auto")
mtcars$am[which(mtcars$am == "1")] <- c("manual")
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$am <- factor(mtcars$am)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
sapply(mtcars, class)
mtcars$am[which(mtcars$am == "0")] <- "auto"
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$am <- factor(mtcars$am)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars[which(mtcars$am == "0"), "am"] <- c("auto")
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$am <- factor(mtcars$am)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
levels(mtcars$am) <- c("auto", "manual")
for(i in 2:ncol(mtcars)){
print(summary(lm(mtcars[,1] ~ mtcars[,i])))
}
apply(mtcars[, 2:11], 2, function(vari) print(summary(lm(mtcars$mpg ~ vari-1))))
apply(mtcars[, 2:11], 2, function(vari) print(class(vari)))
apply(mtcars[, 2:11], 2, class)
sapply(mtcars, class)
sapply(mtcars[2, 11], class)
sapply(mtcars[, 11], class)
sapply(mtcars[, 2:11], class)
sapply(mtcars[, 2:11], function(vari) print(summary(lm(mtcars$mpg ~ vari-1))))
lapply(mtcars[, 2:11], function(vari) print(summary(lm(mtcars$mpg ~ vari-1))))
data(mtcars)
mtcars$vs <- factor(mtcars$vs)
mtcars$am <- factor(mtcars$am)
levels(mtcars$vs) <- c("V", "S")
levels(mtcars$am) <- c("auto", "manual")
summary(lm(mpg ~ wt, data = mtcars))
lm(mpg ~wt, data = mtcars)$coef
lapply(mtcars[, c(8, 9)], function(slope) summary(glm(mtcars$mpg ~ slope))
)
lapply(mtcars[, c(8, 9)], function(slope) summary(glm(mtcars$mpg ~ slope - 1)))
lm(mpg ~ wt, mtcars)
summary(lm(mpg ~ wt, mtcars))
summary(lm(mpg ~ wt, mtcars))$coef
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$am <- factor(mtcars$am)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
levels(mtcars$am) <- c("auto", "manual")
fit <- lm(mpg ~ . data=mtcars)
fit <- lm(mpg ~ ., data=mtcars)
vif(fit)
install.packages(usdm)
install.packages("usdm")
vif(fit)
fit1 <- lm(mpg ~ am, mtcars)
fit2 <- update(fit, mpg ~ am + wt)
fit3 <- update(fit, mpg ~ am + wt + cyl)
anova(fit1, fit2, fit3)
summary(lm(wt ~ am, mtcars)$coef)
summary(lm(wt ~ am, mtcars))$coef
summary(lm(cyl ~ am, mtcars))$coef
data(mtcars)
mtcars$vs <- factor(mtcars$vs)
mtcars$am <- factor(mtcars$am)
levels(mtcars$am) <- c("auto", "manual")
fit1 <- lm(mpg ~ am, mtcars)
fit2 <- update(fit, mpg ~ am + wt)
fit3 <- update(fit, mpg ~ am + wt + cyl)
anova(fit1, fit2, fit3)
summary(lm(cyl ~ am, mtcars))$coef
View(mtcars)
fit1 <- lm(mpg ~ am, mtcars)
fit2 <- update(fit, mpg ~ am + wt)
fit3 <- update(fit, mpg ~ am + wt + cyl)
fit4 <- update(fit, mpg ~ am + wt + cyl + disp)
fit5 <- update(fit, mpg ~ am + wt + cyl + disp + hp)
fit6 <- update(fit, mpg ~ am + wt + cyl + disp + hp + drat)
fit7 <- update(fit, mpg ~ am + wt + cyl + disp + hp + drat + qsec)
fit8 <- update(fit, mpg ~ am + wt + cyl + disp + hp + drat + qsec + gear)
fit9 <- update(fit, mpg ~ am + wt + cyl + disp + hp + drat + qsec + gear + carb)
anova(fit1, fit2, fit3, fit4, fit5, fit6, fit7, fit8, fit9)
library(car)
vif()
vif
vif(fit)
vif(fit1)
vif(fit2)
vif(fit3)
vif(fit4)
vif(fit5)
vif(fit6)
vif(fit7)
vif(fit8)
vif(fit9)
fit <- lm(mpg ~ ., mtcars)
vif(fit)
fitx <- lm(mpg ~ drat + qsec +vs + am + gear + carb, mtcars)
summary(fitx)
fitv <- lm(mpg ~ drat + vs + am, mtcars)
summary(fitv)$coef
fit <- lm(mpg ~ drat + vs + am, mtcars)
dfbeta(fit)[,5]
dfbeta(fit)[,3]
dfbeta(fit)[,4]
df <- dfbeta(fit)[, 4]
df
confint(df)
mean(df)
a <- c(-5, -4, -3, -2, -1, 0 , 1, 2, 3, 4, 5)
confint(a)
confint(fit)
a<- data.frame(c(1,2,3), c("a", "b", "c"))
a
colnames(a)
pandox
pandoc
library(knitr)
pandoc('C7W4A The comparison of automatic and manual transmission car.Rmd', format = 'pdf')
pwd
wd
wd()
pwd()
pwd()
wd()
getwd()
library(knitr)
pandoc('C7W4A The comparison of automatic and manual transmission car.Rmd', format = 'pdf')
install.packages("knitr")
install.packages("knitr")
install.packages(digest)
install.packages("digest")
install.packages(c("BH", "curl", "DBI", "HistData", "Hmisc", "installr", "jsonlite", "lubridate", "nlme", "openssl", "packrat", "Rcpp", "rmarkdown", "rsconnect", "slam", "stringi", "swirl", "testthat", "TTR", "zoo"))
install.packages("jsonlite")
fit1 <- lm(mpg ~ am, mtcars)
fit2 <- update(fit1, mpg ~ am + wt)
fit3 <- update(fit1, mpg ~ am + wt + cyl)
fit4 <- update(fit1, mpg ~ am + wt + cyl + disp)
fit5 <- update(fit1, mpg ~ am + wt + cyl + disp + hp)
fit6 <- update(fit1, mpg ~ am + wt + cyl + disp + hp + drat)
fit7 <- update(fit1, mpg ~ am + wt + cyl + disp + hp + drat + qsec)
fit8 <- update(fit1, mpg ~ am + wt + cyl + disp + hp + drat + qsec + gear)
fit9 <- update(fit1, mpg ~ am + wt + cyl + disp + hp + drat + qsec + gear + carb)
anova(fit1, fit2, fit3, fit4, fit5, fit6, fit7, fit8, fit9)
summary(lm(wt ~ am + wt + cyl, mtcars))
summary(lm(wt ~ am + wt + cyl + qsec, mtcars))
summary(lm(wt ~ am + wt + qsec, mtcars))
summary(lm(mpg ~ am + wt + cyl, mtcars))
shiny::runApp('data-science-class/appTest')
shiny::runApp('data-science-class/appTest')
shiny::runApp('data-science-class/appTest')
shiny::runApp('data-science-class/appTest')
shiny::runApp('data-science-class/appTest')
shiny::runApp('data-science-class/appTest')
shiny::runApp('data-science-class/appTest')
shiny::runApp('data-science-class/appTest')
install.packages("rCharts")
require(rCharts)
require(devtools)
install_github('rCharts', 'ramnathv')
install_github('rCharts', 'ramnathv')
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 = nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
n1
data(economics, package = "ggplot2")
econ = transform(economics, date = as.character(date))
m1 = mPlot(x = "date", y = c("psavert", "uempmed"), type = "Line", data = econ)
m1$set(pointSize = 0, lineWidth = 1)
m1
m1$print("chart1") # print out the js
m1$save('myPlot.html') #save as html file
install.packages("googleVis")
M = gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
plot(m)
library(googleVis)
M = gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
plot(m)
M = gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
plot(M)
install.packages("leaflet")
library(leaflet)
m = leaflet() %>%
addTiles() %>%
addMarkers(lat=39.298113, lng=-76.590248, popup="Where Brian works")
m
G <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = List(width = 600, height = 400))
print(G, "chart")
G <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width = 600, height = 400))
print(G, "chart")
G <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width = 600, height = 400))
print(G, "chart")
G
F <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width = 600, height = 400, Regions = 150))
F
print(G, "chart")
plot(G)
plot(G, "chart")
plot(G, "chart")
plot(F)
demo(googleVis)
library(devtools)
install_github("ropensci"/plotly)
install_github("ropensci/plotly")
install_github("ropensci/plotly")
library(devtools)
install_github("ropensci/plotly")
library(devtools)
install_github("ropensci/plotly")
library(plotly)
library("ggplot2", lib.loc="~/R/win-library/3.3")
g <- ggplot(myData, aes(y = enrollment, x = class, fill = offering))
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
shiny::runApp('data-science-class/C9W4A_Neuron_activation_calculation')
shiny::runApp('data-science-class/C9W4A_Neuron_activation_calculation')
shiny::runApp('data-science-class/C9W4A_Neuron_activation_calculation')
getwd()
setwd("data-science-class/C9W4A_Neuron_activation_calculation/")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
